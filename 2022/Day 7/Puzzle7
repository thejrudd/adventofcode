# Had to go to YouTube to even start untangling this one. https://www.youtube.com/watch?v=FXQWIWHaFBE&t=478s
# There were a couple of commands I wasn't aware of that would have helped immensely. I also struggled with breaking down the problem into smaller chunks. 
# Conceptually, this was a tough puzzle to get my head around, specifically regarding having to update the total size of the directories that contain other directories.
# I could just not crystallize a solution to that in my head. I cleary need more work on how to implement dictionaries in my code, as that was of high importance
# in this solution, and I just could not figure out how to make them work by myself.

with open('/Users/justinruddick/Documents/GitHub/adventofcode/2022/Day 7/puzzleinput.txt', 'r') as file:
    commands = [command.strip() for command in file.readlines()]

# Need variables that keep track of which directory we're in and the size of the directory.

path = "/home"
dir_name = ""
dirs = {"/home":0}

for command in commands:
    if command[0] == "$":
        if command[2:4] == "ls":
            pass
        elif command[2:4] == "cd":
            if command[5:6] == "/":
                path = "/home"
            elif command[5:7] == "..":
                #rfind finds the last occurance of a character
                path = path[:path.rfind("/")]
            else:
                dir_name = command[5:]
                path = path + "/" + dir_name
                dirs.update({path:0})
    elif command[0:3] == "dir":
        pass
    else:
        size = int(command[:command.find(" ")]) # Gets the size of the file by reading from the beginning until the first space in the line.
        dir = path
        for i in range(path.count("/")):
            dirs[dir] += size
            dir = dir[:dir.rfind("/")] 

total = 0

for dir in dirs:
    if dirs[dir] <= 100000:
        total += dirs[dir]

print("Answer to part 1:", total)
                        